apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'com.google.gms.google-services'

apply plugin: 'com.google.firebase.crashlytics'

android {

    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        applicationId "com.smsparatodos.smsparatodos"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 2
        versionName "1.2"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField('String', 'BASE_URL', BASE_URL_PRODUCTION)
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField('String', 'BASE_URL', BASE_URL_PRODUCTION)
            versionNameSuffix "-debug"
        }
        staging {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField('String', 'BASE_URL', BASE_URL_STAGING)
            versionNameSuffix "-staging"
        }
    }

    flavorDimensions "default"

    productFlavors {
        dev {
            dimension "default"
        }
        prod {
            dimension "default"
        }
    }

    android.variantFilter { variant ->
        if (variant.buildType.name == 'release'
                && variant.getFlavors().get(0).name == 'dev') {
            variant.setIgnore(true)
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "smsparatodos-v${variant.versionName}.apk"
        }
    }

    buildFeatures {
        dataBinding = true
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

dependencies {
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlinVersion}"
    implementation "androidx.core:core-ktx:${kotlinCoreVersion}"
    implementation "androidx.activity:activity-ktx:${activityKtxVersion}"
    implementation "androidx.fragment:fragment-ktx:${fragmentKtxVersion}"

    // App dependencies
    implementation "androidx.appcompat:appcompat:${appCompatVersion}"
    implementation "androidx.constraintlayout:constraintlayout:${constraintlayoutVersion}"
    implementation "com.google.android.material:material:${materialVersion}"
    implementation "androidx.legacy:legacy-support-v4:${androidXLegacySupport}"

    // Architecture Components
    implementation "androidx.lifecycle:lifecycle-extensions:${archLifecycleVersion}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${archViewModelVersion}"
    implementation "android.arch.lifecycle:common-java8:${archLifecycleCommonVersion}"
    implementation "android.arch.work:work-runtime-ktx:${workManagerVersion}"

    // Dagger
    implementation "com.google.dagger:dagger:${daggerVersion}"
    kapt "com.google.dagger:dagger-compiler:${daggerVersion}"
    implementation "com.google.dagger:dagger-android-support:${daggerVersion}"
    kapt "com.google.dagger:dagger-android-processor:${daggerVersion}"

    // Firebase SDK
    implementation "com.google.firebase:firebase-analytics:${firebaseAnalyticsVersion}"
    implementation "com.google.firebase:firebase-messaging:${firebaseMessagingVersion}"
    implementation "com.google.firebase:firebase-crashlytics:${firebaseCrashlyticsVersion}"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-moshi:${moshiVersion}"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${coroutinesVersion}"

    // Timber
    implementation "com.jakewharton.timber:timber:${timberVersion}"

    // Dependencies for local unit tests
    testImplementation "junit:junit:${junitVersion}"

    // Dependencies for Android unit tests
    androidTestImplementation "junit:junit:${junitVersion}"
    androidTestImplementation "androidx.test.ext:junit:${junitXVersion}"

    // Android Testing Support Library - Instrumented testing
    androidTestImplementation "androidx.test:runner:${androidXTestVersion}"
    androidTestImplementation "androidx.test:rules:${androidXTestVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${espressoVersion}"
}
